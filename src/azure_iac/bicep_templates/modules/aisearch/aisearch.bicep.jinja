// The template to create an Azure AI Search service

param name string = 'aisearch${uniqueString(resourceGroup().id)}'
param location string = resourceGroup().location
param sku string = 'standard'
param allowIps array = []
param principalIds array = []
param roleDefinitionId string = '8ebe5a00-799e-43f5-93ac-243d3dce84a7'  // Search Index Data Contributor
param keyVaultName string = ''
param secretName string = 'myvault/mysecret'

resource searchService 'Microsoft.Search/searchServices@2023-11-01' = {
	name: name
	location: location
	sku: {
		name: sku
	}
	properties: {
		replicaCount: 1
		partitionCount: 1
		hostingMode: 'default'
		networkRuleSet: {
			ipRules: [for ip in allowIps: {
				value: ip
			}]
		}
	}
}

// create role assignments for the specified principalIds
resource roleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = [for principalId in principalIds: {
	scope: searchService
	name: guid(name, principalId)
	properties: {
		roleDefinitionId: resourceId('Microsoft.Authorization/roleDefinitions', roleDefinitionId)
		principalId: principalId
	}
}]

// create key vault and secret if keyVaultName is specified
resource keyVault 'Microsoft.KeyVault/vaults@2022-07-01' existing = if (keyVaultName != ''){
	name: keyVaultName
}

resource keyVaultSecret 'Microsoft.KeyVault/vaults/secrets@2022-07-01' = if (keyVaultName != ''){
	name: secretName
	parent: keyVault
	properties: {
		attributes: {
			enabled: true
		}
		contentType: 'string'
		value: searchService.listAdminKeys().primaryKey
	}
}


output id string = searchService.id
output endpoint string = 'https://${searchService.name}.search.windows.net'
output keyVaultSecretUri string = (keyVaultName != '' ? keyVaultSecret.properties.secretUriWithVersion : '')
