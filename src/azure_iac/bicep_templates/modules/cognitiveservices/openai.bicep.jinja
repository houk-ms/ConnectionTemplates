param name string = 'OpenAI-${uniqueString(resourceGroup().id)}'
param deploymentName string = 'AIDeploy-${uniqueString(resourceGroup().id)}'
param location string = resourceGroup().location
param sku string = 'S0'
param allowIps array = []
param principalIds array = []
param roleDefinitionId string = 'a001fd3d-188f-4b5d-821b-7da978bf7442'  // Cognitive Services OpenAI Contributor
param keyVaultName string = ''
param secretName string = 'myvault/mysecret'

// Create a Cognitive Service account of the kind of OpenAI
resource cognitiveService 'Microsoft.CognitiveServices/accounts@2021-10-01' = {
    name: name
    location: location
    sku: {
        name: sku
    }
    kind: 'OpenAI'

    properties: {
        networkAcls: {
            defaultAction: 'Deny'
            ipRules: [
                for ip in allowIps: {
                    value: ip
                }
            ]
        }
    }
}

// create a model deployment
resource cognitiveServiceDeployment 'Microsoft.CognitiveServices/accounts/deployments@2023-05-01' = {
    name: deploymentName
    sku: {
        name: 'P3'
    }
    parent: cognitiveService
    properties: {
        model: {
            format: 'OpenAI'
            name: 'gpt-4'
        }
        scaleSettings: {
            capacity: 1
            scaleType: 'Standard'
        }
        versionUpgradeOption: 'OnceNewDefaultVersionAvailable'
    }
}

// create role assignments for the specified principalIds
resource roleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = [for principalId in principalIds: {
    scope: cognitiveService
    name: guid(name, principalId)
    properties: {
        roleDefinitionId: resourceId('Microsoft.Authorization/roleDefinitions', roleDefinitionId)
        principalId: principalId
    }
}]

// create key vault and secret if keyVaultName is specified
resource keyVault 'Microsoft.KeyVault/vaults@2022-07-01' existing = if (keyVaultName != ''){
    name: keyVaultName
}

resource keyVaultSecret 'Microsoft.KeyVault/vaults/secrets@2022-07-01' = if (keyVaultName != ''){
    name: secretName
    parent: keyVault
    properties: {
        attributes: {
            enabled: true
        }
        contentType: 'string'
        value: cognitiveService.listKeys().key1
    }
}


output id string = cognitiveService.id
output deploymentId string = cognitiveServiceDeployment.id
output endpoint string = cognitiveService.properties.endpoint
output keyVaultSecretUri string = (keyVaultName != '' ? keyVaultSecret.properties.secretUriWithVersion : '')
